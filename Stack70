#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
typedef struct No {
    int valor;
    struct No* proximo;
} No;
 
typedef struct Pilha {
    No* topo;
    int tamanho;
} Pilha;
 
void inicializar(Pilha* pilha) {
    pilha->topo = NULL;
    pilha->tamanho = 0;
}
 
void PUSH(Pilha* pilha, int valor) {
    No* novo = (No*)malloc(sizeof(No));
    if (!novo) return;
    
    novo->valor = valor;
    novo->proximo = pilha->topo;
    pilha->topo = novo;
    pilha->tamanho++;
}
 
int POP(Pilha* pilha, int* valor) {
    if (pilha->topo == NULL) return 0;
    
    No* temp = pilha->topo;
    *valor = temp->valor;
    pilha->topo = temp->proximo;
    free(temp);
    pilha->tamanho--;
    return 1;
}
 
void CLEAR(Pilha* pilha) {
    int temp;
    while (POP(pilha, &temp));
}
 
void pilhaString(Pilha* pilha, char* saida) {
    No* atual = pilha->topo;
    int primeiro = 1;
    int pos = 0;
    
    while (atual) {
        if (!primeiro) saida[pos++] = ' ';
        primeiro = 0;
        pos += sprintf(saida + pos, "%d", atual->valor);
        atual = atual->proximo;
    }
    saida[pos] = '\0';
}
 
void removerQuebraLinha(char* str) {
    for (int i = 0; str[i]; i++) {
        if (str[i] == '\n' || str[i] == '\r') {
            str[i] = '\0';
            break;
        }
    }
}
 
int comparaStrings(const char* a, const char* b) {
    while (*a && *b && *a == *b) {
        a++; b++;
    }
    return *a == *b;
}
 
int main() {
    Pilha pilha;
    inicializar(&pilha);
 
    int N; 
    do {
        if (scanf("%d", &N) != 1) return 0;
    } while (N < 1 || N > 100);
    getchar(); 
 
    char linha[100];
    char saidas[100][200];
    int contadorSaidas = 0;
    int erro = 0;
 
    for (int i = 0; i < N && !erro; i++) {
        if (!fgets(linha, sizeof(linha), stdin)) break;
        removerQuebraLinha(linha);
 
        char comando[16];
        int argumento;
        int partes = sscanf(linha, "%15s %d", comando, &argumento);
 
        if (comparaStrings(comando, "PUSH") && partes == 2) {
            PUSH(&pilha, argumento);
        }
        else if (comparaStrings(comando, "POP")) {
            int valor;
            if (!POP(&pilha, &valor)) {
                sprintf(saidas[contadorSaidas++], "Erro: Pilha vazia!\n");
                erro = 1;
            }
        }
        else if (comparaStrings(comando, "ADD") || comparaStrings(comando, "SUB") || 
                 comparaStrings(comando, "MUL") || comparaStrings(comando, "DIV")) {
            int b, a;
            if (!POP(&pilha, &b) || !POP(&pilha, &a)) {
                sprintf(saidas[contadorSaidas++], "Erro: Elementos insuficientes para operacao!\n");
                erro = 1;
            } 
            else {
                if (comparaStrings(comando, "ADD")) PUSH(&pilha, a + b);
                else if (comparaStrings(comando, "SUB")) PUSH(&pilha, a - b);
                else if (comparaStrings(comando, "MUL")) PUSH(&pilha, a * b);
                else {
                    if (b == 0) {
                        sprintf(saidas[contadorSaidas++], "Erro: Divisao por zero!\n");
                        erro = 1;
                    } else {
                        PUSH(&pilha, a / b);
                    }
                }
            }
        }
        else if (comparaStrings(comando, "DUP")) {
            if (!pilha.topo) {
                sprintf(saidas[contadorSaidas++], "Erro: Pilha vazia para DUP!\n");
                erro = 1;
            } else {
                PUSH(&pilha, pilha.topo->valor);
            }
        }
        else if (comparaStrings(comando, "SWAP")) {
            if (pilha.tamanho < 2) {
                sprintf(saidas[contadorSaidas++], "Erro: Pilha insuficiente para SWAP!\n");
                erro = 1;
            } else {
                int x, y;
                POP(&pilha, &x);
                POP(&pilha, &y);
                PUSH(&pilha, x);
                PUSH(&pilha, y);
            }
        }
        else if (comparaStrings(comando, "ROLL") && partes == 2) {
            if (argumento < 1 || argumento > pilha.tamanho) {
                erro = 1;
            } else {
                Pilha temp;
                inicializar(&temp);
                int valor;
                
                for (int j = 1; j < argumento; j++) {
                    POP(&pilha, &valor);
                    PUSH(&temp, valor);
                }
                
                POP(&pilha, &valor);
                while (temp.topo) {
                    POP(&temp, &argumento);
                    PUSH(&pilha, argumento);
                }
                PUSH(&pilha, valor);  
            }
        }
        else if (comparaStrings(comando, "CLEAR")) {
            CLEAR(&pilha);
        }
        else if (comparaStrings(comando, "PRINT")) {
            pilhaString(&pilha, saidas[contadorSaidas]);
            int len = strlen(saidas[contadorSaidas]);
            saidas[contadorSaidas][len++] = '\n';
            saidas[contadorSaidas][len] = '\0';
            contadorSaidas++;
        }
        else {
            erro = 1;
        }
    }
 
    // Imprime todas as saídas
    for (int i = 0; i < contadorSaidas; i++) {
        printf("%s", saidas[i]);
    }
 
    CLEAR(&pilha);
    return 0;
}
